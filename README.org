* pasp-mode

A major mode for editing [[https://potassco.org/][Potassco]] Answer Set Programs files (`.lp`).  

From the Potassco website:  
Answer Set Programming (ASP) offers a simple and powerful modeling language to solve combinatorial problems. With our tools you can concentrate on an actual problem, rather than a smart way of implementing it.

** Features

- Syntax highlighting
- Commenting functionality
- Run clingo from emacs

*** Keybindings

- `C-c C-b` Call clingo with the current buffer
- `C-c C-e` Call clingo with the current buffer as encoding and some user provided instance
- `C-c C-r` Call clingo with the currently selected region

The above will all prompt for clingo command-line options (e.g., ~-c n=3 -n 0~, etc.).

- `C-c C-c` Comment region
- `C-c C-u` Uncomment region

** Installation

*** Melpa

#+BEGIN_QUOTE
n.b.: The version of pasp-mode available on MELPA is the upstream [[https://github.com/santifa/pasp-mode][santifa]] pasp-mode.  This, Llaisdy, version is not yet available on MELPA.
#+END_QUOTE

The Potassco ASP mode is available through the [MELPA][] repository.
This is the recommended way to install the `pasp-mode`.

You can either install `pasp-mode` by hand with:
<kbd> M-x package-install [RET] pasp-mode [RET]</kbd>

or place the following snippet into your Emacs init file:
```el
(unless (package-installed-p 'pasp-mode)
  (package-refresh-contents)
  (package-install 'pasp-mode))
```

*** Manually

Download the `pasp-mode.el` file from this repository.
Either put it into your emacs load path and call `(require 'pasp-mode)` 
in your init file or load it directly with `(load "~/path/to/pasp-mode.el")`

Afterwards opening an `.lp` file triggers `pasp-mode` or
call <kbd>M-x pasp-mode</kbd> within an open asp file.

** todo

- Smart indentation based on nesting depth
- Refactoring of predicates/variables (complete buffer and #program parts)
- Color compilation output
- Smart rearrange of compilation output (predicates separated, table...) 
- yas-snippet for rules; constraints; soft constraints; generation?
- sync as much as possible with [[https://github.com/rkaminsk/vim-syntax-clingo][vim-syntax-clingo]]
- integrations with org-mode, company, etc.

** Contributions

Contributions, via issues, ideas and pull requests, are highly welcome!

** License

Copyright (c) 2020 by Ivan Uemlianin \\
Copyright (c) 2017 by Henrik JÃ¼rges

Distributed under the [[http://www.gnu.org/copyleft/gpl.html][GNU General Public License]]; type <kbd>C-h C-c</kbd> to view it.
